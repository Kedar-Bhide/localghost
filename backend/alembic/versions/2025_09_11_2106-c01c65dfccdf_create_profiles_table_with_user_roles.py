"""Create profiles table with user roles

Revision ID: c01c65dfccdf
Revises: 
Create Date: 2025-09-11 21:06:52.046299

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c01c65dfccdf'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_reviews_rating'), table_name='reviews')
    op.drop_table('reviews')
    op.drop_index(op.f('idx_user_locations_city_country'), table_name='user_locations')
    op.drop_index(op.f('idx_user_locations_coordinates'), table_name='user_locations', postgresql_using='gist')
    op.drop_index(op.f('idx_user_locations_user_id'), table_name='user_locations')
    op.drop_table('user_locations')
    op.drop_index(op.f('idx_itinerary_templates_search'), table_name='itinerary_templates', postgresql_using='gin')
    op.drop_table('itinerary_templates')
    op.drop_index(op.f('idx_messages_conversation_id'), table_name='messages')
    op.drop_index(op.f('idx_messages_created_at'), table_name='messages')
    op.drop_index(op.f('idx_messages_sender'), table_name='messages')
    op.drop_index(op.f('idx_messages_unread'), table_name='messages', postgresql_where='(is_read = false)')
    op.drop_table('messages')
    op.drop_table('search_history')
    op.drop_table('search_preferences')
    op.drop_index(op.f('idx_conversations_last_message'), table_name='conversations')
    op.drop_index(op.f('idx_conversations_participants'), table_name='conversations')
    op.drop_table('conversations')
    op.drop_index(op.f('idx_itinerary_requests_location_dates'), table_name='itinerary_requests')
    op.drop_table('itinerary_requests')
    op.drop_index(op.f('idx_local_profiles_availability'), table_name='local_profiles')
    op.drop_table('local_profiles')
    op.drop_index(op.f('idx_notifications_user_id_unread'), table_name='notifications', postgresql_where='(is_read = false)')
    op.drop_table('notifications')
    op.drop_table('itinerary_proposals')
    op.add_column('profiles', sa.Column('email', sa.String(length=255), nullable=False))
    op.add_column('profiles', sa.Column('password_hash', sa.String(length=255), nullable=False))
    op.alter_column('profiles', 'full_name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('profiles', 'role',
               existing_type=postgresql.ENUM('traveler', 'local', name='user_role_enum'),
               type_=sa.Enum('TRAVELER', 'LOCAL', name='userrole'),
               existing_nullable=False,
               existing_server_default=sa.text("'traveler'::user_role_enum"))
    op.drop_index(op.f('idx_profiles_active'), table_name='profiles', postgresql_where='(is_active = true)')
    op.drop_index(op.f('idx_profiles_role'), table_name='profiles')
    op.drop_index(op.f('idx_profiles_search'), table_name='profiles', postgresql_using='gin')
    op.create_index(op.f('ix_profiles_email'), 'profiles', ['email'], unique=True)
    op.drop_constraint(op.f('profiles_id_fkey'), 'profiles', type_='foreignkey')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key(op.f('profiles_id_fkey'), 'profiles', 'users', ['id'], ['id'], referent_schema='auth', ondelete='CASCADE')
    op.drop_index(op.f('ix_profiles_email'), table_name='profiles')
    op.create_index(op.f('idx_profiles_search'), 'profiles', [sa.literal_column("to_tsvector('english'::regconfig, (full_name || ' '::text) || COALESCE(bio, ''::text))")], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_profiles_role'), 'profiles', ['role'], unique=False)
    op.create_index(op.f('idx_profiles_active'), 'profiles', ['is_active'], unique=False, postgresql_where='(is_active = true)')
    op.alter_column('profiles', 'role',
               existing_type=sa.Enum('TRAVELER', 'LOCAL', name='userrole'),
               type_=postgresql.ENUM('traveler', 'local', name='user_role_enum'),
               existing_nullable=False,
               existing_server_default=sa.text("'traveler'::user_role_enum"))
    op.alter_column('profiles', 'full_name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('profiles', 'password_hash')
    op.drop_column('profiles', 'email')
    op.create_table('itinerary_proposals',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('request_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('delivery_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('revision_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['request_id'], ['itinerary_requests.id'], name=op.f('itinerary_proposals_request_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('itinerary_proposals_pkey'))
    )
    op.create_table('notifications',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('new_message', 'itinerary_request', 'request_accepted', 'request_completed', 'new_review', name='notification_type_enum'), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('action_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reference_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('read_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_pushed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['profiles.id'], name=op.f('notifications_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('notifications_pkey'))
    )
    op.create_index(op.f('idx_notifications_user_id_unread'), 'notifications', ['user_id'], unique=False, postgresql_where='(is_read = false)')
    op.create_table('local_profiles',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('specialties', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('languages', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("ARRAY['en'::text]"), autoincrement=False, nullable=True),
    sa.Column('response_time_hours', sa.INTEGER(), server_default=sa.text('24'), autoincrement=False, nullable=True),
    sa.Column('availability_status', postgresql.ENUM('available', 'busy', 'away', 'offline', name='availability_enum'), server_default=sa.text("'available'::availability_enum"), autoincrement=False, nullable=True),
    sa.Column('total_conversations', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_completed_itineraries', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('average_rating', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id'], ['profiles.id'], name=op.f('local_profiles_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('local_profiles_pkey'))
    )
    op.create_index(op.f('idx_local_profiles_availability'), 'local_profiles', ['availability_status'], unique=False)
    op.create_table('itinerary_requests',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('traveler_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('local_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('group_size', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('preferences', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('special_requirements', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'accepted', 'in_progress', 'completed', 'declined', 'cancelled', name='request_status_enum'), server_default=sa.text("'pending'::request_status_enum"), autoincrement=False, nullable=True),
    sa.Column('estimated_delivery', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('delivered_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint('group_size > 0', name='valid_group_size'),
    sa.CheckConstraint('start_date <= end_date', name='valid_dates'),
    sa.CheckConstraint('start_date >= CURRENT_DATE', name='future_dates'),
    sa.ForeignKeyConstraint(['local_id'], ['profiles.id'], name='itinerary_requests_local_id_fkey'),
    sa.ForeignKeyConstraint(['traveler_id'], ['profiles.id'], name='itinerary_requests_traveler_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='itinerary_requests_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_itinerary_requests_location_dates'), 'itinerary_requests', ['start_date', 'end_date'], unique=False)
    op.create_table('conversations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('traveler_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('local_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('active', 'archived', 'blocked', 'deleted', name='conversation_status_enum'), server_default=sa.text("'active'::conversation_status_enum"), autoincrement=False, nullable=True),
    sa.Column('message_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('last_message_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint('traveler_id <> local_id', name='different_users'),
    sa.ForeignKeyConstraint(['local_id'], ['profiles.id'], name='conversations_local_id_fkey'),
    sa.ForeignKeyConstraint(['traveler_id'], ['profiles.id'], name='conversations_traveler_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='conversations_pkey'),
    sa.UniqueConstraint('traveler_id', 'local_id', name='unique_conversation', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_conversations_participants'), 'conversations', ['traveler_id', 'local_id'], unique=False)
    op.create_index(op.f('idx_conversations_last_message'), 'conversations', [sa.literal_column('last_message_at DESC')], unique=False)
    op.create_table('search_preferences',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('preferred_languages', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('preferred_age_range', postgresql.INT4RANGE(), autoincrement=False, nullable=True),
    sa.Column('max_response_time_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('preferred_specialties', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['profiles.id'], name=op.f('search_preferences_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('search_preferences_pkey'))
    )
    op.create_table('search_history',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('query', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('location', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('filters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('result_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('clicked_profile_ids', postgresql.ARRAY(sa.UUID()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['profiles.id'], name=op.f('search_history_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('search_history_pkey'))
    )
    op.create_table('messages',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('conversation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sender_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('message_type', postgresql.ENUM('text', 'image', 'location', 'system', name='message_type_enum'), server_default=sa.text("'text'::message_type_enum"), autoincrement=False, nullable=True),
    sa.Column('attachment_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('read_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], name=op.f('messages_conversation_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sender_id'], ['profiles.id'], name=op.f('messages_sender_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('messages_pkey'))
    )
    op.create_index(op.f('idx_messages_unread'), 'messages', ['conversation_id'], unique=False, postgresql_where='(is_read = false)')
    op.create_index(op.f('idx_messages_sender'), 'messages', ['sender_id'], unique=False)
    op.create_index(op.f('idx_messages_created_at'), 'messages', [sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('idx_messages_conversation_id'), 'messages', ['conversation_id'], unique=False)
    op.create_table('itinerary_templates',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('local_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('view_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['local_id'], ['profiles.id'], name=op.f('itinerary_templates_local_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('itinerary_templates_pkey'))
    )
    op.create_index(op.f('idx_itinerary_templates_search'), 'itinerary_templates', [sa.literal_column("to_tsvector('english'::regconfig, (title || ' '::text) || description)")], unique=False, postgresql_using='gin')
    op.create_table('user_locations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('city', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('country', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('country_code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('coordinates', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('is_primary', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['profiles.id'], name=op.f('user_locations_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_locations_pkey'))
    )
    op.create_index(op.f('idx_user_locations_user_id'), 'user_locations', ['user_id'], unique=False)
    op.create_index(op.f('idx_user_locations_coordinates'), 'user_locations', ['coordinates'], unique=False, postgresql_using='gist')
    op.create_index(op.f('idx_user_locations_city_country'), 'user_locations', ['city', 'country'], unique=False)
    op.create_table('reviews',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('traveler_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('local_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('request_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('helpful_votes', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('response_from_local', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('response_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name=op.f('reviews_rating_check')),
    sa.ForeignKeyConstraint(['local_id'], ['profiles.id'], name=op.f('reviews_local_id_fkey')),
    sa.ForeignKeyConstraint(['request_id'], ['itinerary_requests.id'], name=op.f('reviews_request_id_fkey')),
    sa.ForeignKeyConstraint(['traveler_id'], ['profiles.id'], name=op.f('reviews_traveler_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('reviews_pkey')),
    sa.UniqueConstraint('traveler_id', 'local_id', 'request_id', name=op.f('unique_review'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_reviews_rating'), 'reviews', ['local_id', 'rating'], unique=False)
    # ### end Alembic commands ###
